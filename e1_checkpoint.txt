{
  "metadata": {
    "kernelspec": {
      "name": "node_nteract",
      "language": "javascript",
      "display_name": "Node.js (nteract)"
    },
    "kernel_info": {
      "name": "node_nteract"
    },
    "language_info": {
      "name": "javascript",
      "version": "8.2.1",
      "mimetype": "application/javascript",
      "file_extension": ".js"
    },
    "title": "WepSIM 2.0.11",
    "nteract": {
      "version": "nteract-on-jupyter@2.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0,
  "cells": [
    {
      "cell_type": "markdown",
      "source": "## mode",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "ep",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "mode",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## firmware",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "ld rdest rorig{\n  co=010000,\n  nwords=1,\n  rdest=reg(25,21),\n  rorig=reg(20,16),\n  {\n    (SELA=10000, T9, LC, SELC=10101, B, A0)\n  }\n}\nldi rdest val{\n  co=010010,\n  nwords=1,\n  rdest=reg(25,21),\n  val=inm(15,0),\n  {\n    (SIZE=10000,OFFSET=0,T3,LC,SELC=10101, B, A0)\n  }\n}\nld rdest (rorig){\n  co=010011,\n  nwords=1,\n  rdest=reg(25,21),\n  rorig=reg(20,16),\n  {\n    (SELA=10000,T9, C0),#Cargamos el valor del registro origen en mar\n    (TA, R, BW=11, M1, C1),#Nos traemos de memoria en la posicion que hemos indicado en mar el valor y lo cargamos entero en mbr\n    (T1,SELC=10101,LC, B, A0)#Cargamos el valor de mbr en el registro destino\n  }\n}\nadd_a rorig{\n  co=011000,\n  nwords=1,\n  rorig=reg(25,21),\n  {\n    (SELA=10101,T9,C4),#cargamos el valor del registro origen en rt1\n    (SELB=100, MR, MA, SELCOP=1010, MC, T6, LC, SELC=100,SELP=11,M7,C7, B, A0)#Pasamos el valor de A a la ALU y se lo sumamos al valor de rt1 y finalmente lo guardamos en A\n  }\n}\naddi_a val{\n  co=011010,\n  nwords=1,\n  val=inm(15,0),\n  {\n    (SE, SIZE=10000, T3, C5),\n    (SELA=100, MR, MB=01, SELCOP=1010, MC, SELP=11, M7, C7, T6, LC, SELC= 100, A0, B)\n  }\n}\ninc rdest{\n  co=011100,\n  nwords=1,\n  rdest=reg(25,21),\n  {\n    (SELA=10101, MB=11, SELCOP=1010, MC, T6, LC, SELC=10101, SELP=11, M7, C7, B, A0)#Saco el valor del registro destino lo llevamos a la alu le sumamos uno y directamente lo guardamos de nuevo en el mismo registro\n  }\n}\ndec rdest{\n  co=011101,\n  nwords=1,\n  rdest=reg(25,21),\n  {\n    (SELA=10101, MB=11, SELCOP=1011, MC, T6, LC, SELC=10101, SELP=11, M7, C7, B, A0)#Saco el valor del registro destino lo llevamos a la alu le restamos uno y directamente lo guardamos de nuevo en el mismo registro\n  }\n  }\n}\njp val{\n  co=110000,\n  nwords=1,\n  val=address(15,0)rel,\n  {\n    (SE, SIZE=10000, T3, C5),\n    (T2, C4),\n    (MA, MB=01, SELCOP=1010, MC, T6, C2, A0, B)\n  }\n}\njpz val{\n  co=110011,\n  nwords=1,\n  val=address(15,0)rel,\n  {\n    (C=110, B, MADDR=backtofetch)\n    (SE, SIZE=10000, T3, C5),\n    (T2, C4),\n    (MA, MB=01, SELCOP=1010, MC, T6, C2, A0, B),\n    backtofetch: (A0, B)\n  }\n}\ncall val{\n  co= 100001,\n  nwords=1,\n  val=inm(15,0)\n  {\n    (SELA=11101, MR, C0, MB=10, SELCOP=1011, MC, T6, LC, SELC=11101),#Llevamos el valor de sp a la alu para restarle cuatro, ese valor lo llevamos a mar y lo cargamos de nuevo en el registro sp\n    (T2, C1),#Cargamos el valor de pc en mbr\n    (TA, BW=11, TD, W, SIZE=10000, OFFSET=0, T3, C2, B, A0)#Cargamos mbr en memoria en la posicion de mar, y cargamos el valor inmediato en pc\n  }\n}\nret{\n  co=100010,\n  nwords=1,\n  {\n   (SELA=11101, MR, T9, C0, MB=10, SELCOP=1010, MC, C6),\n   (TA, R, BW=11, M1, C1, T7, LC, SELC=11101, MR),\n   (T1, C2, A0, B)\n  }\n}\nhalt{\n  co=100011,\n  nwords=1,\n  {\n    ( EXCODE=0,T11,C2, B, A0)#Cargamos el valor 0 a traves de excode en pc\n  }\n}\npush rorig{\n  co=100100,\n  nwords=1,\n  rorig=reg(25,21)\n  {\n  (SELA=11101, MR, MB=10, SELCOP=1011, MC, T6, LC, SELC=11101, C0),\n   (SELA=10101, T9, C1)\n   (TA, BW=11, TD, W, A0, B)\n  }\n}\npop rdest{\n  co= 100101,\n  nwords=1,\n  rdest=reg(25,21),\n  {\n    (SELA=11101, MR, T9, C0, MB=10, SELCOP=1010, MC, C6),#cargamos el valor de sp en mar y lo llevamos a la alu para sumarle 4 y guardarlo en rt6\n    (TA, R, BW=11, M1, C1, T7, LC, SELC=11101, MR),#Nos traemos de memoria el valor almacenado en la direccion de mar y lo guardamos en mbr, guardamos el nuevo valor de sp\n    (T1, LC, SELC=10101, B, A0)#Guardamos el valor de mbr en el registro de destino\n  }\n}\n\nregisters\n{\n        4=A,\n        5=BC,\n        6=DE,\n        7=HL,\n        8=IX,\n        9=IY,\n        29=$sp (stack_pointer)\n}",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "firmware",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## assembly",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "assembly",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## state_current",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "{\n  \"time\": 1575051173045,\n  \"title\": \"clock 1 @ &#181;address 0\",\n  \"title_short\": \"clock 1,<br>&#181;add 0\",\n  \"content\": \"register R29 = 0xfffff; register PC = 0x8000; memory 0x8000 = 0x8400002; memory 0x8004 = 0x8600001; memory 0x8008 = 0xa21809; memory 0x800c = 0x8400002; memory 0x8010 = 0x8600001; memory 0x8014 = 0xa2180a; \"\n}",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "state_current",
        "type": "object",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## state_history",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "[]",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "state_history",
        "type": "object",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## record",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "[]",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "record",
        "type": "object",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## tag",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "tag",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## notify",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "true",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "notify",
        "type": "boolean",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    }
  ]
}